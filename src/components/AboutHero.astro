---
interface Props{
    title? : string;
    content? : string
}
const { title = '', content = '' } = Astro.props;
---
<section class="lg:px-40 px-11 overflow-hidden">
    <div class="container">
        <div class="about-content py-[120px] text-white relative">
            <h1 class="md:text-7xl text-3xl lg:w-3/4 w-screen about-heading">
                {
                    Array.from(title).map((char, index) => (
                        char === '|' ? <br data-key={index} /> : <span data-key={index} set:html={char === ' ' ? "&nbsp;" : char}></span>
                    ))
                }
            </h1>
            <div class="about-at-symbol ">
                <svg width="600" height="600" viewBox="0 0 600 672" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                    <path id="Path-copy" fill="#ffffff" stroke="none" d="M -0 662.824097 C 101.251282 442.560974 202.304947 223.381653 305.296204 0 C 404.219574 223.732117 501.516632 443.786072 600 666.523071 C 592.055603 666.523071 586.515808 666.532593 580.976013 666.521606 C 544.327454 666.449402 507.675079 666.064758 471.032959 666.517029 C 462.008423 666.628174 457.996063 663.702515 454.545258 655.323425 C 405.087616 535.234131 355.206207 415.319397 305.376129 295.383698 C 304.727478 293.822388 303.421539 292.534149 301.260162 289.471771 C 245.664856 415.944366 190.645721 541.106323 135.553955 666.433411 C 91.344307 666.433411 47.552944 666.455322 3.762109 666.327148 C 2.439881 666.323364 1.122195 664.749634 -0 662.824097 Z"/>
                    </svg>
            </div>
            <div class="pt-11 md:text-3xl text-2xl about-content-content">{content}</div>
        </div>
    </div>
    <script>
        const aboutScrolling = () => {
            const aboutSpan = document.querySelectorAll('.about-heading > span');
            const aboutContent = document.querySelector(".about-content-content");
            aboutSpan.forEach(item => {
                setTimeout(() => {
                    (item as HTMLElement).setAttribute('style', 'opacity: 1; transform: translateY(0%) translateZ(0px);');
                }, Array.from(aboutSpan).indexOf(item) * 100);
            });
            setTimeout(() => {
                (aboutContent as HTMLElement).style.cssText = 'opacity: 1; transform: translateY(0%) translateZ(0px)';
            }, 1000);
        }
        const rotateAboutAtSymbol = () => {
            const aboutAtSymbol = document.querySelector('.about-at-symbol') as HTMLElement;
            if (aboutAtSymbol) {
                const scrollPosition = window.scrollY;
                const rotationDegrees = scrollPosition / window.innerHeight * 360;
                aboutAtSymbol.style.transform = `rotateY(${rotationDegrees}deg)`;
            }
        };
        aboutScrolling();

        const aboutContent = document.querySelector(".about-content");
        const aboutSpan = document.querySelectorAll('.about-heading > span');
        const aboutContentContent = document.querySelector(".about-content-content");

        window.addEventListener('scroll', function() {
            rotateAboutAtSymbol();
            if (aboutContent.getBoundingClientRect().top < window.innerHeight && aboutContent.getBoundingClientRect().bottom > 0) {
                aboutScrolling();
            } else {
                aboutSpan.forEach(item => {item.removeAttribute('style');});
                aboutContentContent.removeAttribute('style');
            }
        });
    </script>
</section>
